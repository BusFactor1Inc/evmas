.enable-read-eval!
;;
;; erc20.evm 
;;
;; WARNING: UNTESTED as of yet, do not deploy or use.
;;	
;; An ERC20 implementation in Ethereum Assembly.
;;
;; Reference:
;; 
;; https://github.com/benjaminion/LLL_erc20
;;
;; BusFactor1 Inc.
;; Copyright 2018
;; License: MIT

.define	name 		"The BusFactor1 EVM ASM Token"
.define	name-size	28
.define symbol 		"BF1"
.define symbol-size 	3
.define decimals	0	
.define initial-supply 	100

.define _owner 0	
	
.define not-payable		(callvalue :abort jumpi)
.define payable			(callvalue iszero :abort jumpi)
	
;;
;; Contract constructor code.
;;	
.address :init
	not-payable
	caller _owner sstore	;; save token owner
	initial-supply caller sstore ;; assign initial token supply to owner

	;; Copy the contract code to memory
	:initend codesize sub	;; contract code size
	dup1			;; make a copy of code size
	:initend
	0			;; where to copy it to
	codecopy		;; perform contract code copy to memory

	;; Return code for contract
	0 return		;; code size already on stack
.address :initend
	
;;
;; Include ERC20 function selectors.
;;
.include "examples/erc20/erc20-selectors.evm"	
.include "examples/erc20/erc20-events.evm"	

;;
;; Arguments helpers
;;	
.include "libs/argument-helpers.evm"

;; UNTESTED
.define only-owner			(caller 32 _owner sload sub :abort jumpi)

.macro dispatch-function (function-label selector)
	(dup1			;; copy selector
         selector eq		;; compare with arg
	 function-label jumpi)  ;; call function if match
	
;;
;; Start of installed contract code.
;;
.org 0	
.address :start
	;; Load the selector from the call data
	load-selector		

	;; transfer(address,uint256)
	dispatch-function :transfer transfer-selector
	
	;; balanceOf(address)
	dispatch-function :get-balance-of get-balance-of-selector

	;; transfer-from(address,address,uint256)
	dispatch-function  :transfer-from transfer-from-selector

	;; approve(address,uint256)
	dispatch-function :approve approve-selector

	;; allowance(address,address)
	dispatch-function :get-allowance get-allowance-selector

	;; name() call
	dispatch-function :get-name get-name-selector

	;; symbol() call
	dispatch-function :get-symbol get-symbol-selector

	;; decimals() call
	dispatch-function :get-decimals get-decimals-selector

	;; totalSupply() call
	dispatch-function :total-supply get-total-supply-selector

	;; Default handler for contract
	not-payable

;;
;; Include library functions.
;; 

.include "examples/abort.evm"
.include "examples/safeMath/safeAdd.evm"
; .include "examples/safeMath/safeSub.evm"

.label :get-name
	not-payable ensure-0-args
	#x20 0 mstore	;; Return dynamic bytes
	name #.(+ #x20 (lookup 'name-size)) mstore
	name-size #x20 mstore ;; the order of these last 2 is important
	#x60 0 return	;; return name value

.label :get-symbol
	not-payable ensure-0-args
	#x20 0 mstore	;; Return dynamic bytes
	symbol #.(+ #x20 (lookup 'symbol-size)) mstore
	symbol-size #x20 mstore ;; the order of these last 2 is important
	#x60 0 return	;; return symbol value

.label :get-decimals	
	not-payable ensure-0-args
	decimals 0 mstore
	#x20 0 return

.label :total-supply
	not-payable ensure-0-args
	initial-supply 0 mstore
	#x20 0 return


;; Ensure the value is an address (20 bytes), leave address on stack if so, abort if not
;; Not cheap without shift instructions, but they arent' working yet
.define ensure-address			(dup1 #xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 and :abort jumpi)		
.define ensure-value			(dup1 initial-supply lt :abort jumpi)


	;; balanceOf(address)
.label :get-balance-of
	not-payable ensure-1-arg
	push-arg0 ensure-address	;; ensure arg1 is an address
	sload 0 mstore			;; load balance from storage
	#x20 0 return			;; return value


	;; transfer(address,uint256)
.label :transfer
	not-payable ensure-2-args

	push-arg1 ensure-value		;; [value]
	dup1				;; [value, value]
 	iszero :transfer-return jumpi	;; value of zero is noop, return, [value]
					;; memory is initialized to 0, so return 0

	caller sload			;; get balance [value, callerBalance]

	dup2				;; [value, callerBalance, value]
	dup2				;; [value, callerBalance, value, callerBalance]
	lt :abort jumpi			;; if callerBalance < value abort,
					;; [value, callerBalance]
	dup2				;; [value, value, callerBalance]
	swap1				;; [value, callerBalance, value]


	sub 				;; [value, callerBalance-value]
	caller sstore			;; store new caller balance, [value]

	push-arg0 ensure-address	;; [value, destinationAddres]
	dup1				;; [value, destinationAddress, destinationAddres]
	sload				;; [value, destinationAddress, destinationBalance]
	swap1 swap2			;; [destinationAddress, destinationBalance, value]
	:afterSA :safeAdd jump .label :afterSA ;; [destinationAddress, destinationBalance+value]

	swap1				;; [destinationBalance+value, destinationAddress]
	sstore				;; store new balance

	1 0 mstore			;; return true value

.label :transfer-return
	#x20 0 return
	
	;; (address,address,uint256)
.label :transfer-from
	not-payable ensure-3-args
	;; TODO
	stop

	;; approve(address,uint256)
.label :approve
	not-payable ensure-2-args
	;; TODO
	stop

	;; allowance(address,address)
.label :get-allowance
	not-payable ensure-2-args
	;; TODO
	stop
	
.label :end
.end
